// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart'
    show Firebase, FirebaseOptions;
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:notification_service/service/http_service.dart';

enum DeviceType {
  // ignore: constant_identifier_names
  IOS,
  ANDROID
}

class UnifonicPush {
  static HttpService httpService = HttpService();

  static initFirebase(platform) async {
    WidgetsFlutterBinding.ensureInitialized();
    await Firebase.initializeApp(options: platform);
  }

  static configure() async {
    UnifonicPush.initFirebase(await UnifonicPush.currentPlatform);
  }

  static Future<FirebaseOptions> get currentPlatform async {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }

    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return mapFirebaseOption(await httpService.firebaseConfig("ANDROID"));
      case TargetPlatform.iOS:
        return mapFirebaseOption(await httpService.firebaseConfig("IOS"));
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions mapFirebaseOption(Map<String, dynamic> data) {
    return FirebaseOptions(
      apiKey: data['apiKey'],
      appId: data['appId'],
      messagingSenderId: data['messagingSenderId'],
      projectId: data['projectId'],
      storageBucket: data['storageBucket'],
    );
  }
}
